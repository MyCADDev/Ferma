The Ferma schema is defined by a collection of interfaces and classes written by the user. Each method will interact with the underlying graph to either modify the graph in some way, or to retrieve an element or property from the graph. There are two techniques for defining how these methods behave. Either you can explicitly implement the method, or you can leave the method as abstract and annotate the method in order to allow Ferma to implement the method for you. Here we will define the annotations available to you and how they work, along with a few examples.

The behavior of an annotated method is dictated not only by the annotation applied to it but also the method's signature. Therefore an annotated method will behave differently if it's return type, arguments, or even if the method name were to change. It is important to note that when a method is explicitly defined (doesnt use an annotation) then the method signature can be anything.

Method names that are annotated must have one of the following prefixes: add, get, remove, set, is, can.

Below specifies that annotations that can be used when defining a Frame's interface. By specifying the method argument and return types, the underlying graph is constrained to the interface specification.

h1. Valid on all frames

h2. @@Property@ annotation

Allowed prefixes: @get@, @is@, @can@, @set@, @remove@

Annotation arguments:
@value@ - The name of the property

h3. @get@ prefix

Valid return types: *Any*
Valid method arguments: @()@

Get the property value of an element. Used when property is not a boolean value.

example:

```java
@Property("Foo")
Foobar getFoobar()
```

h3. @is@ prefix

Valid return types: @boolean@
Valid method arguments: @()@

Get the property value of an element. Used when property is a boolean value.

example:

```java
@Property("Foobared")
boolean isFoobared()
```

h3. @set@ prefix

Valid return types: *None*
Valid method arguments: @(Object)@

Set the property value of an element.

example:

```java
@Property("Foo")
void setFoobar(Foobar foobar)
```

h3. @@remove@ prefix

Valid return types: *None*
Valid method arguments: @()@

Remove the property of an element.

example:

```java
@Property("Foo")
void removeFoobar()
```

h1. Valid on vertices (VertexFrame)

h2. @@Adjacency@ annotation

Allowed prefixes: @add@, @get@, @remove@, @set@

Annotation arguments:
@label@ - The label assigned to the edge which connects the adjacent nodes.
@direction@ - The direction for the edge which creates the adjacency. It can be assigned any of the values from @org.apache.tinkerpop.gremlin.structure.Direction@.

h3. @add@ prefix

Valid method arguments: @()@, @(ClassInitializer)@, @(ClassInitializer, ClassInitializer)@, @(VertexFrame)@

Adds a node as an adjacency to the current node, and the returns the newly connected node.

h4. @()@ arguments

Valid return types: @VertexFrame@

Creates a new vertex without any type information as well as an untyped edge to connect to it. The newly created VertexFrame is returned.

example:

```java
@Adjacency("Foo")
VertexFrame addFoobar()
```

|_. annotation |_. method prefix |_. arguments |_. description |_. example |
| @@Adjacency@ | @get@ | @label@, @direction@ | get the vertex or vertices @X@ related to the vertex | @@Adjacency(label="X", direction=Direction.OUT)@ |
| @@Adjacency@ | @set@ | @label@, @direction@ | set the vertex or vertices @X@ related to the vertex | @@Adjacency(label="X", direction=Direction.OUT)@ |
| @@Adjacency@ | @add@ | @label@, @direction@ | add a vertex @X@ related to the vertex and return the vertex @X@| @@Adjacency(label="X", direction=Direction.OUT)@ |
| @@Adjacency@ | @remove@ | @label@, @direction@ | remove a vertex @X@ related to the vertex| @@Adjacency(label="X", direction=Direction.OUT)@ |
| @@Incidence@ | @get@ | @label@, @direction@ | get the edges @X@ related to the vertex | @@Incidence(label="X", direction=Direction.OUT)@ |
| @@Incidence@ | @add@ | @label@, @direction@ | add an edge @X@ related to the vertex and return the edge @X@| @@Incidence(label="X", direction=Direction.OUT)@ |
| @@Incidence@ | @remove@ | @label@, @direction@ | remove an edge @X@ related to the vertex | @@Incidence(label="X", direction=Direction.OUT)@ |

Annotated methods for @get*@ methods may return any class that is part of the schema, representing a single instance, or an Iterator, representing multiple instances. When a class other than an iterator is returned then even if there are multiple matches then only the first match is returned.

```java
public abstract class Person extends VertexFrame {
  @Adjacency("knows")
  public abstract Iterator<Person> getKnowsPeople();

  @Adjacency("knows")
  public abstract Person getKnowsPerson();

  @Adjacency("knows")
  public abstract void setKnowsPerson(Person friend);

  @Adjacency("knows")
  public abstract void setKnowsPeople(Iterator<Person> friends);
}
```

The above interface uses both styles of getter and setter: an Iterable-valued style which allows you to set multiple values simultaneously and a "functional" style which requires you to specify exactly one value.  Each style has its advantages, depending on your application.

"add" methods for @@Adjacency@ can be either single-valued or no-valued For example:
```java
public interface Person {
    @Adjacency(label = "friend")
    Person addFriend(); //Returns a new vertex of type friend

    @Adjacency(label = "friend")
    Person addFriend(Person friend); //Add an existing person as a friend
}
```

h1. Valid on edges (EdgeFrame)

|_. annotation |_. method prefix |_. arguments |_. description |_. example |
| @@InVertex@ | @get@ | none | get the in-vertex. This is equivalent to calling Edge.getVertex(Direction.IN)  | @@InVertex@ |
| @@OutVertex@ | @get@ | none | get the out-vertex. This is equivalent to calling Edge.getVertex(Direction.OUT)  | @@OutVertex@ |